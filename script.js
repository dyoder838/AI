require('dotenv').config();
const inquirer = require('inquirer');
const { OpenAI } = require('langchain/llms/openai');
const { PromptTemplate } = require("langchain/prompts");
const { StructuredOutputParser } = require("langchain/output_parsers");

// connection to openAI API
const model = new OpenAI({
  openAIApiKey: process.env.OPENAI_API_KEY,
  temperature: 0,
  model: 'gpt-3.5-turbo'
});

// langChain template prompts
const promptFunc = async (input) => {

  try {

    // use langChain to narrow down the scope of the question and provide extreme detail in the answer.
    // this is the format of the instructions that will be given to the AI, it is generated by langChain based on the "explanation".
    const parser = StructuredOutputParser.fromNamesAndDescriptions({
      code: "Javascript code that answers the user's question",
      explanation: "detailed explanation of the example code provided",
    });

    // object instructions for the AI to follow from above
    const formatInstructions = parser.getFormatInstructions();

    // main langChain prompt
    const prompt = new PromptTemplate({
      template: "You are a javascript expert and will answer the userâ€™s coding questions thoroughly as possible.\n{format_instructions}\n{question}?",
      inputVariables: ["question"],
      partialVariables: { format_instructions: formatInstructions }
    });

    const promptInput = await prompt.format({
      question: input
    });

    // view the reformatted prompt for the AI
    console.log("promptInput", promptInput);

    // call the AI with the reformatted question
    const res = await model.call(promptInput);
    console.log(await parser.parse(res));

  }
  catch (err) {
    console.log(err);
  }
};

// inquirer prompt
const init = () => {
  inquirer.prompt([
    {
      type: 'input',
      name: 'name',
      message: 'Ask a question',
    },

  ]).then((inquirerResponse) => {
    promptFunc(inquirerResponse.name)
  });
};


// initialize the script
init();